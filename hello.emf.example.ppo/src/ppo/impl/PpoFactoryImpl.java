/** */package ppo.impl;import java.util.Date;import org.eclipse.emf.ecore.EClass;import org.eclipse.emf.ecore.EDataType;import org.eclipse.emf.ecore.EObject;import org.eclipse.emf.ecore.EPackage;import org.eclipse.emf.ecore.impl.EFactoryImpl;import org.eclipse.emf.ecore.plugin.EcorePlugin;import ppo.*;/** * <!-- begin-user-doc --> * An implementation of the model <b>Factory</b>. * <!-- end-user-doc --> * @generated */public class PpoFactoryImpl extends EFactoryImpl implements PpoFactory {	/**	 * Creates the default factory implementation.	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public static PpoFactory init() {		try {			PpoFactory thePpoFactory = (PpoFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.example.com/PrimerPO"); 			if (thePpoFactory != null) {				return thePpoFactory;			}		}		catch (Exception exception) {			EcorePlugin.INSTANCE.log(exception);		}		return new PpoFactoryImpl();	}	/**	 * Creates an instance of the factory.	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public PpoFactoryImpl() {		super();	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	@Override	public EObject create(EClass eClass) {		switch (eClass.getClassifierID()) {			case PpoPackage.PURCHASE_ORDER: return createPurchaseOrder();			case PpoPackage.US_ADDRESS: return createUSAddress();			case PpoPackage.ITEM: return createItem();			default:				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");		}	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	@Override	public Object createFromString(EDataType eDataType, String initialValue) {		switch (eDataType.getClassifierID()) {			case PpoPackage.SKU:				return createSKUFromString(eDataType, initialValue);			case PpoPackage.DATE:				return createDateFromString(eDataType, initialValue);			default:				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");		}	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	@Override	public String convertToString(EDataType eDataType, Object instanceValue) {		switch (eDataType.getClassifierID()) {			case PpoPackage.SKU:				return convertSKUToString(eDataType, instanceValue);			case PpoPackage.DATE:				return convertDateToString(eDataType, instanceValue);			default:				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");		}	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public PurchaseOrder createPurchaseOrder() {		PurchaseOrderImpl purchaseOrder = new PurchaseOrderImpl();		return purchaseOrder;	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public USAddress createUSAddress() {		USAddressImpl usAddress = new USAddressImpl();		return usAddress;	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public Item createItem() {		ItemImpl item = new ItemImpl();		return item;	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public String createSKUFromString(EDataType eDataType, String initialValue) {		return (String)super.createFromString(eDataType, initialValue);	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public String convertSKUToString(EDataType eDataType, Object instanceValue) {		return super.convertToString(eDataType, instanceValue);	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public Date createDateFromString(EDataType eDataType, String initialValue) {		return (Date)super.createFromString(eDataType, initialValue);	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public String convertDateToString(EDataType eDataType, Object instanceValue) {		return super.convertToString(eDataType, instanceValue);	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @generated	 */	public PpoPackage getPpoPackage() {		return (PpoPackage)getEPackage();	}	/**	 * <!-- begin-user-doc -->	 * <!-- end-user-doc -->	 * @deprecated	 * @generated	 */	@Deprecated	public static PpoPackage getPackage() {		return PpoPackage.eINSTANCE;	}} //PpoFactoryImpl